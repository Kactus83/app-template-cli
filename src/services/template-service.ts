import { execSync } from 'child_process';
import fs from 'fs-extra';
import * as path from 'path';
import os from 'os';

/**
 * Fonction utilitaire qui retourne le chemin absolu par d√©faut vers le fichier de cl√© priv√©e.
 * Elle s'assure de retirer tout caract√®re ind√©sirable au d√©but du chemin (comme un slash ou backslash)
 * pour qu'il soit utilisable sur toutes les plateformes.
 *
 * @returns Le chemin absolu vers la cl√© priv√©e par d√©faut.
 */
function getDefaultKeyPath(): string {
  // Calculer le chemin √† partir du module actuel (dans dist/)
  let p = path.join(path.dirname(new URL(import.meta.url).pathname), '..', 'secrets', 'deploy_key_auth_boilerplate');
  // Sur Windows, new URL(import.meta.url).pathname peut commencer par un slash ou backslash. On le retire.
  p = p.replace(/^[/\\]+/, '');
  return p;
}

/**
 * Interface repr√©sentant un credential utilisateur.
 *
 * Ici, on demande un nom d'utilisateur et un mot de passe.
 */
export interface Credential {
  username: string;
  password: string;
}

/**
 * Interface repr√©sentant un template.
 */
export interface Template {
  name: string;
  url: string;
}

/**
 * Service de gestion des templates.
 *
 * Ce service g√®re :
 * - Le clonage d‚Äôun template depuis un d√©p√¥t Git priv√© via une deploy key.
 * - L‚Äôenregistrement et la r√©cup√©ration du credential utilisateur.
 * - La r√©cup√©ration (fictive) de la liste des templates disponibles.
 *
 * Pour le clonage, l'authentification s'effectue toujours via la cl√© priv√©e par d√©faut
 * incluse dans le package, quelle que soient les valeurs saisies par l'utilisateur.
 */
export class TemplateService {
  /**
   * Le template par d√©faut.
   */
  public static DEFAULT_TEMPLATE: Template = {
    name: 'default',
    url: 'git@github.com:Kactus83/app-template.git',
  };

  /**
   * Chemin vers le fichier de credential dans le dossier de l'utilisateur.
   *
   * Le credential est stock√© dans le r√©pertoire personnel dans un fichier cach√©.
   */
  private static CREDENTIAL_FILE: string = path.join(os.homedir(), '.appwizard-credentials.json');

  /**
   * Chemin par d√©faut vers la cl√© priv√©e incluse dans le package.
   */
  private static DEFAULT_KEY_PATH: string = getDefaultKeyPath();

  /**
   * Enregistre le credential utilisateur dans le fichier de configuration.
   *
   * @param credential - Le credential √† enregistrer.
   */
  public static async saveCredential(credential: Credential): Promise<void> {
    try {
      await fs.writeFile(TemplateService.CREDENTIAL_FILE, JSON.stringify(credential, null, 2));
      console.log('‚úÖ Credential utilisateur enregistr√© avec succ√®s.');
    } catch (error) {
      console.error('‚ùå Erreur lors de l‚Äôenregistrement du credential utilisateur:', error);
      throw error;
    }
  }

  /**
   * R√©cup√®re le credential utilisateur enregistr√©.
   *
   * @returns Le credential (de type Credential) ou undefined s'il n'est pas trouv√©.
   */
  public static async getCredential(): Promise<Credential | undefined> {
    if (await fs.pathExists(TemplateService.CREDENTIAL_FILE)) {
      const data = await fs.readFile(TemplateService.CREDENTIAL_FILE, 'utf8');
      try {
        const json = JSON.parse(data) as Credential;
        return json;
      } catch (error) {
        console.error('‚ùå Erreur lors de la lecture du fichier de credential utilisateur.', error);
        return undefined;
      }
    }
    return undefined;
  }

  /**
   * Renvoie la liste des templates disponibles.
   *
   * Pour cette version, elle renvoie uniquement le template par d√©faut.
   *
   * @param _credential - Le credential utilisateur (non utilis√© ici, mais pr√©vu pour √©voluer).
   * @returns Un tableau de templates disponibles.
   */
  public static async listTemplates(_credential: Credential): Promise<Template[]> {
    return [TemplateService.DEFAULT_TEMPLATE];
  }

  /**
   * Clone le template depuis le d√©p√¥t Git dans le r√©pertoire cible.
   *
   * L'authentification s'effectue via la cl√© priv√©e par d√©faut incluse dans le package,
   * ind√©pendamment des credentials utilisateur.
   *
   * @param targetDir - Chemin absolu du r√©pertoire cible.
   * @param repoUrl - URL du d√©p√¥t Git du template.
   * @param _credential - Le credential utilisateur (non utilis√© pour le clonage).
   * @throws Une erreur si le clonage ou le nettoyage √©choue.
   */
  public static async fetchTemplate(
    targetDir: string,
    repoUrl: string,
    _credential: Credential
  ): Promise<void> {
    const rawKeyPath = TemplateService.DEFAULT_KEY_PATH;
    const fixedKeyPath = rawKeyPath.replace(/\\/g, '/');
    const quotedKeyPath = `"${fixedKeyPath}"`;

    // V√©rifier que le fichier de cl√© existe
    if (!(await fs.pathExists(rawKeyPath))) {
      throw new Error(`Le fichier de cl√© priv√©e par d√©faut n'existe pas au chemin: ${rawKeyPath}`);
    }

    const gitSshCommand = `ssh -i ${quotedKeyPath} -o StrictHostKeyChecking=no`;
    const env = { ...process.env, GIT_SSH_COMMAND: gitSshCommand };

    try {
      console.log(`üì• Clonage du template depuis ${repoUrl} dans ${targetDir}...`);
      execSync(`git clone --depth=1 ${repoUrl} "${targetDir}"`, { stdio: 'inherit', env });
      console.log('‚úÖ Clonage termin√© avec succ√®s.');

      const gitFolder = path.join(targetDir, '.git');
      if (await fs.pathExists(gitFolder)) {
        console.log('üßπ Suppression du dossier .git du template clon√©...');
        await fs.remove(gitFolder);
        console.log('‚úÖ Dossier .git supprim√©.');
      } else {
        console.warn('‚ö†Ô∏è Aucun dossier .git trouv√© dans le r√©pertoire cible.');
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du clonage du template :', error);
      throw new Error('√âchec du clonage du template.');
    }
  }
}
