import fs from 'fs-extra';
import * as path from 'path';
import prompts from 'prompts';
import { execSync } from 'child_process';
import { CliConfig } from '../config/cli-config.js';
import { TemplateService, Template, Credential } from '../services/template-service.js';

// Pour ESM, d√©finir __dirname
const __dirname = path.dirname(new URL(import.meta.url).pathname);

/**
 * Liste des fichiers/dossiers √† exclure lors du test de "non-viduit√©" du r√©pertoire.
 */
const ALLOWED_FILES = ['.git', '.vscode', '.DS_Store'];

/**
 * Nettoie le r√©pertoire cible en supprimant tous les fichiers et dossiers
 * qui ne figurent pas dans la liste des √©l√©ments autoris√©s.
 *
 * @param targetDir - Chemin absolu du r√©pertoire √† nettoyer.
 */
async function cleanTargetDirectory(targetDir: string): Promise<void> {
  const entries = await fs.readdir(targetDir);
  for (const entry of entries) {
    if (!ALLOWED_FILES.includes(entry)) {
      await fs.remove(path.join(targetDir, entry));
    }
  }
}

/**
 * V√©rifie si le r√©pertoire cible contient des fichiers/dossiers autres que les √©l√©ments autoris√©s.
 *
 * @param targetDir - Chemin absolu du r√©pertoire √† v√©rifier.
 * @returns true si le r√©pertoire est consid√©r√© "vide", false sinon.
 */
async function isDirectoryEmpty(targetDir: string): Promise<boolean> {
  const entries = await fs.readdir(targetDir);
  const filtered = entries.filter(entry => !ALLOWED_FILES.includes(entry));
  return filtered.length === 0;
}

/**
 * Propose √† l'utilisateur d'utiliser le dossier courant ou de cr√©er un sous-dossier pour le projet.
 *
 * @param currentDir - Chemin absolu du r√©pertoire courant.
 * @returns Chemin absolu du r√©pertoire cible.
 */
async function chooseTargetDirectory(currentDir: string): Promise<string> {
  if (await isDirectoryEmpty(currentDir)) {
    return currentDir;
  }
  
  const response = await prompts({
    type: 'select',
    name: 'choice',
    message: 'Le r√©pertoire courant contient d√©j√† des fichiers. Que souhaitez-vous faire ?',
    choices: [
      { title: `Utiliser le dossier courant (${path.basename(currentDir)}) et le nettoyer (sauf ${ALLOWED_FILES.join(', ')})`, value: 'useCurrent' },
      { title: 'Cr√©er un sous-dossier pour le nouveau projet', value: 'createSubfolder' }
    ]
  });

  if (response.choice === 'useCurrent') {
    console.log(`\n‚ö†Ô∏è  Le dossier courant (${currentDir}) sera nettoy√© (sauf ${ALLOWED_FILES.join(', ')}) !`);
    const confirm = await prompts({
      type: 'confirm',
      name: 'ok',
      message: 'Confirmez-vous cette op√©ration ?',
      initial: false,
    });
    if (confirm.ok) {
      await cleanTargetDirectory(currentDir);
      return currentDir;
    } else {
      console.log('Op√©ration annul√©e. Veuillez relancer la commande.');
      process.exit(0);
    }
  } else {
    const responseFolder = await prompts({
      type: 'text',
      name: 'folderName',
      message: 'Entrez le nom du nouveau dossier √† cr√©er pour le projet :',
      initial: 'mon-projet'
    });
    if (!responseFolder.folderName.trim()) {
      console.log('‚ùå Le nom du dossier ne peut pas √™tre vide.');
      process.exit(1);
    }
    const newFolderPath = path.join(currentDir, responseFolder.folderName.trim());
    if (await fs.pathExists(newFolderPath)) {
      console.log(`‚ùå Le dossier ${newFolderPath} existe d√©j√†.`);
      process.exit(1);
    }
    await fs.mkdir(newFolderPath);
    return newFolderPath;
  }
}

/**
 * G√®re l'initialisation ou le commit du d√©p√¥t Git dans le r√©pertoire cible.
 *
 * @param targetDir - Chemin absolu du r√©pertoire cible.
 * @param projectName - Nom du projet.
 */
async function handleGitRepository(targetDir: string, projectName: string): Promise<void> {
  const gitDir = path.join(targetDir, '.git');
  if (await fs.pathExists(gitDir)) {
    const response = await prompts({
      type: 'confirm',
      name: 'commit',
      message: 'Un d√©p√¥t Git a √©t√© d√©tect√© dans ce dossier. Voulez-vous committer la cr√©ation du projet automatiquement ?',
      initial: false
    });
    if (response.commit) {
      try {
        execSync('git add .', { cwd: targetDir, stdio: 'inherit' });
        execSync(`git commit -m "Cr√©ation du projet ${projectName}"`, { cwd: targetDir, stdio: 'inherit' });
        console.log('‚úÖ Commit effectu√©.');
      } catch (error) {
        console.log('‚ùå Erreur lors du commit. Veuillez effectuer le commit manuellement.');
      }
    }
  } else {
    const response = await prompts({
      type: 'confirm',
      name: 'init',
      message: 'Aucun d√©p√¥t Git n\'a √©t√© d√©tect√©. Voulez-vous initialiser un d√©p√¥t Git dans ce dossier ?',
      initial: true
    });
    if (response.init) {
      try {
        execSync('git init', { cwd: targetDir, stdio: 'inherit' });
        execSync('git add .', { cwd: targetDir, stdio: 'inherit' });
        execSync(`git commit -m "Initialisation du projet ${projectName}"`, { cwd: targetDir, stdio: 'inherit' });
        console.log('‚úÖ D√©p√¥t Git initialis√© et commit effectu√©.');
      } catch (error) {
        console.log('‚ùå Erreur lors de l\'initialisation du d√©p√¥t Git. Veuillez l\'initialiser manuellement.');
      }
    }
  }
}

/**
 * Commande "create" permettant de cr√©er un nouveau projet √† partir du template officiel.
 *
 * Cette commande effectue les √©tapes suivantes :
 * - D√©termine le r√©pertoire cible √† utiliser.
 * - Demande √† l'utilisateur de saisir le nom du projet.
 * - Demande √† l'utilisateur son nom d'utilisateur et son mot de passe.
 *   (Ces informations seront enregistr√©es, mais pour le clonage, la cl√© priv√©e par d√©faut incluse est toujours utilis√©e.)
 * - R√©cup√®re la liste des templates disponibles via le credential et propose un choix.
 * - Clone le template s√©lectionn√© dans le r√©pertoire cible via TemplateService.
 * - Cr√©e le fichier de configuration `.app-template` contenant le nom du projet.
 * - G√®re l'initialisation ou le commit dans le d√©p√¥t Git si n√©cessaire.
 *
 * @returns Promise<void> Une fois l'op√©ration termin√©e.
 */
export async function createCommand(): Promise<void> {
  const currentDir = process.cwd();
  const targetDir = await chooseTargetDirectory(currentDir);

  const defaultProjectName = path.basename(targetDir);
  const responseProject = await prompts({
    type: 'text',
    name: 'projectName',
    message: 'üöÄ Quel est le nom de votre nouveau projet ?',
    initial: defaultProjectName,
    validate: (name: string) => name.trim() === '' ? 'Le nom du projet ne peut pas √™tre vide.' : true,
  });

  if (!responseProject.projectName) {
    console.log('‚ùå Op√©ration annul√©e par l\'utilisateur.');
    return;
  }
  const projectName = responseProject.projectName.trim();

  const configFileName = '.app-template';
  const configPath = path.join(targetDir, configFileName);

  if (await fs.pathExists(configPath)) {
    console.log(`‚ö†Ô∏è  Un projet existe d√©j√† dans ce dossier (fichier "${configFileName}" d√©tect√©).`);
    return;
  }

  // Demande des credentials utilisateur
  let credential: Credential | undefined = await TemplateService.getCredential();
  if (!credential) {
    console.log('Aucun credential utilisateur n\'est enregistr√©.');
    const responseCred = await prompts([
      {
        type: 'text',
        name: 'username',
        message: 'Entrez votre nom d\'utilisateur :',
        initial: 'test-user'
      },
      {
        type: 'password',
        name: 'password',
        message: 'Entrez votre mot de passe :'
      }
    ]);
    credential = { username: responseCred.username, password: responseCred.password };
    console.log('‚ö†Ô∏è  Avertissement : Les credentials saisis seront enregistr√©s, mais le clonage utilisera la cl√© priv√©e par d√©faut incluse dans le package.');
    await TemplateService.saveCredential(credential);
  }

  const templates: Template[] = await TemplateService.listTemplates(credential);
  const responseTemplate = await prompts({
    type: 'select',
    name: 'templateChoice',
    message: 'S√©lectionnez le template √† utiliser :',
    choices: templates.map((t: Template) => ({
      title: t.name,
      value: t,
    })),
    initial: 0,
  });

  const chosenTemplate: Template = responseTemplate.templateChoice;

  console.log(`üì• Clonage du template "${chosenTemplate.name}" dans ${targetDir}...`);
  try {
    await TemplateService.fetchTemplate(targetDir, chosenTemplate.url, credential);
    
    import('../config/cli-config.js').then(({ defaultCliConfig }) => {
      const configContent: CliConfig = { ...defaultCliConfig, projectName };
      fs.writeFile(configPath, JSON.stringify(configContent, null, 2))
        .then(() => console.log(`‚úÖ Le projet "${projectName}" a √©t√© cr√©√© avec succ√®s dans ${targetDir} !`))
        .catch(err => console.error('‚ùå Erreur lors de la cr√©ation du fichier de configuration :', err));
    });

    await handleGitRepository(targetDir, projectName);
  } catch (error) {
    console.error('‚ùå Une erreur est survenue durant la cr√©ation du projet :', error);
  }
}
