import fs from 'fs-extra';
import * as path from 'path';
import prompts from 'prompts';
import { FetchTemplateService, Template } from '../services/fetch-template-service.js';
import { GitService } from '../services/git-service.js';
import { ConfigService } from '../services/config-service.js';
import { TemplateService } from '../services/template-service.js';
import { Credential, CredentialsService } from '../services/credentials-service.js';

// Pour ESM, d√©finir __dirname
const __dirname = path.dirname(new URL(import.meta.url).pathname);

/**
 * Liste des fichiers/dossiers √† conserver lors du nettoyage du r√©pertoire.
 * On conserve .git, .vscode et .DS_Store afin de ne pas supprimer un d√©p√¥t Git existant (sauf si l'utilisateur choisit explicitement de le remplacer).
 */
const ALLOWED_FILES = ['.git', '.vscode', '.DS_Store'];

/**
 * Nettoie le r√©pertoire cible en supprimant tous les fichiers et dossiers ne figurant pas dans ALLOWED_FILES.
 *
 * @param targetDir - Chemin absolu du r√©pertoire √† nettoyer.
 * @returns {Promise<void>}
 */
async function cleanTargetDirectory(targetDir: string): Promise<void> {
  const entries = await fs.readdir(targetDir);
  for (const entry of entries) {
    if (!ALLOWED_FILES.includes(entry)) {
      await fs.remove(path.join(targetDir, entry));
    }
  }
}

/**
 * Propose √† l'utilisateur d'utiliser le dossier courant ou de cr√©er un sous-dossier pour le projet.
 * Si le dossier courant est utilis√©, les fichiers non essentiels seront supprim√©s, mais le d√©p√¥t Git existant sera conserv√©
 * si l'utilisateur ne choisit pas de le supprimer.
 *
 * @param currentDir - Chemin absolu du r√©pertoire courant.
 * @returns {Promise<string>} Le chemin absolu du r√©pertoire cible.
 */
async function chooseTargetDirectory(currentDir: string): Promise<string> {
  const response = await prompts({
    type: 'select',
    name: 'folderOption',
    message:
      'Voulez-vous utiliser le dossier courant ou cr√©er un sous-dossier pour votre projet ?\n' +
      '(Si vous utilisez le dossier courant, tous les fichiers non essentiels seront supprim√©s.)',
    choices: [
      { title: 'Utiliser le dossier courant', value: 'current' },
      { title: 'Cr√©er un sous-dossier', value: 'subfolder' },
    ],
    initial: 0,
  });

  if (response.folderOption === 'current') {
    console.log(`\n‚ö†Ô∏è  Attention : Le dossier courant (${currentDir}) sera nettoy√© (hors ${ALLOWED_FILES.join(', ')}) !`);
    // Si un d√©p√¥t Git est pr√©sent, proposer de le supprimer afin d'√©viter les conflits lors de la copie.
    const gitPath = path.join(currentDir, '.git');
    if (await fs.pathExists(gitPath)) {
      const responseGit = await prompts({
        type: 'confirm',
        name: 'replaceGit',
        message: 'Un d√©p√¥t Git est pr√©sent dans ce dossier. Voulez-vous le supprimer pour cloner le template ?',
        initial: true,
      });
      if (responseGit.replaceGit) {
        await fs.remove(gitPath);
        console.log('üóëÔ∏è  Le d√©p√¥t Git existant a √©t√© supprim√©.');
      } else {
        console.log('üëç Le d√©p√¥t Git existant sera conserv√©.');
      }
    }
    await cleanTargetDirectory(currentDir);
    return currentDir;
  } else {
    const responseFolder = await prompts({
      type: 'text',
      name: 'folderName',
      message: 'Entrez le nom du sous-dossier √† cr√©er pour votre projet :',
      initial: 'mon-projet',
    });
    if (!responseFolder.folderName.trim()) {
      console.log('‚ùå Le nom du dossier ne peut pas √™tre vide.');
      process.exit(1);
    }
    const newFolderPath = path.join(currentDir, responseFolder.folderName.trim());
    if (await fs.pathExists(newFolderPath)) {
      console.log(`‚ùå Le dossier ${newFolderPath} existe d√©j√†.`);
      process.exit(1);
    }
    await fs.mkdir(newFolderPath);
    return newFolderPath;
  }
}

/**
 * Commande "create" permettant de cr√©er un nouveau projet √† partir du template officiel.
 *
 * Le processus effectue les √©tapes suivantes :
 * - D√©termine le r√©pertoire cible (dossier courant ou sous-dossier).
 * - Demande le nom du projet.
 * - Demande les credentials utilisateur (nom d'utilisateur et mot de passe) qui sont enregistr√©s,
 *   bien que pour le clonage, la cl√© priv√©e par d√©faut incluse dans le package soit utilis√©e.
 * - Propose le choix du template.
 * - Clone le template dans un dossier temporaire, puis copie son contenu dans le dossier cible.
 * - √âcrit un fichier de configuration.
 * - G√®re le d√©p√¥t Git via GitService (initialisation ou commit).
 *
 * @returns {Promise<void>}
 */
export async function createCommand(): Promise<void> {
  if (!GitService.isGitInstalled()) {
    console.log('‚ùå Git n\'est pas install√© sur votre machine. Veuillez l\'installer avant de continuer.');
    process.exit(1);
  }

  const currentDir = process.cwd();
  const targetDir = await chooseTargetDirectory(currentDir);

  const defaultProjectName = path.basename(targetDir);
  const responseProject = await prompts({
    type: 'text',
    name: 'projectName',
    message: 'üöÄ Quel est le nom de votre nouveau projet ?',
    initial: defaultProjectName,
    validate: (name: string) => name.trim() === '' ? 'Le nom du projet ne peut pas √™tre vide.' : true,
  });
  if (!responseProject.projectName) {
    console.log('‚ùå Op√©ration annul√©e par l\'utilisateur.');
    return;
  }
  const projectName = responseProject.projectName.trim();

  const configFileName = '.app-template';
  const configPath = path.join(targetDir, configFileName);
  if (await fs.pathExists(configPath)) {
    console.log(`‚ö†Ô∏è  Un projet existe d√©j√† dans ce dossier (fichier "${configFileName}" d√©tect√©).`);
    return;
  }

  // Gestion des credentials utilisateur
  let credential: Credential | undefined = await CredentialsService.getCredential();
  if (!credential) {
    console.log('Aucun credential utilisateur n\'est enregistr√©.');
    const responseCred = await prompts([
      {
        type: 'text',
        name: 'username',
        message: 'Entrez votre nom d\'utilisateur :',
        initial: 'test-user',
      },
      {
        type: 'password',
        name: 'password',
        message: 'Entrez votre mot de passe :',
      },
    ]);
    credential = { username: responseCred.username, password: responseCred.password };
    console.log('‚ö†Ô∏è  Avertissement : Les credentials saisis seront enregistr√©s, mais le clonage utilisera la cl√© priv√©e par d√©faut incluse dans le package.');
    await CredentialsService.saveCredential(credential);
  }

  const templates: Template[] = await FetchTemplateService.listTemplates();
  const responseTemplate = await prompts({
    type: 'select',
    name: 'templateChoice',
    message: 'S√©lectionnez le template √† utiliser :',
    choices: templates.map((t: Template) => ({
      title: t.name,
      value: t,
    })),
    initial: 0,
  });
  const chosenTemplate: Template = responseTemplate.templateChoice;

  console.log(`üì• Clonage du template "${chosenTemplate.name}" dans ${targetDir}...`);
  try {
    await FetchTemplateService.fetchTemplate(targetDir, chosenTemplate.url);

    // V√©rifier la validit√© des configurations du template.
    await TemplateService.checkAllConfigs();

    // V√©rifier la validit√© de la configuration du projet (cli).
    await ConfigService.ensureOrUpdateConfig(targetDir, projectName);
    console.log(`‚úÖ Le projet "${projectName}" a √©t√© cr√©√© avec succ√®s dans ${targetDir} !`);

    // Cr√©er ou mettre √† jour le d√©p√¥t Git.
    await GitService.handleRepository(targetDir, projectName);
  } catch (error) {
    console.error('‚ùå Une erreur est survenue durant la cr√©ation du projet :', error);
  }
}
