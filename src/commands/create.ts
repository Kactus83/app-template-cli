import * as fs from 'fs-extra';
import { execSync } from 'child_process';
import * as path from 'path';
import prompts from 'prompts';

/**
 * URL du d√©p√¥t contenant le template de projet.
 */
const TEMPLATE_REPO = 'https://github.com/Kactus83/app-template.git';

/**
 * Ex√©cute la commande permettant de cr√©er un nouveau projet √† partir du template officiel.
 *
 * @remarks
 * Cette commande effectue les √©tapes suivantes :
 * - V√©rifie que le dossier courant est vide.
 * - Demande √† l'utilisateur de saisir le nom du projet.
 * - Clone le d√©p√¥t du template dans le dossier courant.
 * - Configure le projet en cr√©ant un fichier `.app-template`.
 *
 */
export async function createCommand(): Promise<void> {
  const currentDir = process.cwd();
  const configFileName = '.app-template';
  const configPath = path.join(currentDir, configFileName);

  // V√©rification de l'existence d'un projet dans le dossier courant
  if (fs.existsSync(configPath)) {
    console.log(`‚ö†Ô∏è  Un projet existe d√©j√† dans ce dossier (fichier "${configFileName}" d√©tect√©).`);
    return;
  }

  // V√©rification si le dossier courant est vide (bonne pratique recommand√©e)
  const files = fs.readdirSync(currentDir);
  if (files.length > 0) {
    console.log('‚ö†Ô∏è  Le r√©pertoire courant n\'est pas vide. Il est conseill√© de d√©marrer dans un r√©pertoire vide.');
    return;
  }

  // Demande interactive du nom de projet √† l'utilisateur
  const response = await prompts({
    type: 'text',
    name: 'projectName',
    message: 'üöÄ Quel est le nom de votre nouveau projet ?',
    initial: 'mon-projet',
    validate: (name: string) => name.trim() === '' ? 'Le nom du projet ne peut pas √™tre vide.' : true,
  });

  if (!response.projectName) {
    console.log('‚ùå Op√©ration annul√©e par l\'utilisateur.');
    return;
  }

  // D√©but du clonage du d√©p√¥t template
  console.log(`üì• Clonage du template depuis ${TEMPLATE_REPO} en cours...`);
  try {
    execSync(`git clone --depth=1 ${TEMPLATE_REPO} "${currentDir}"`, { stdio: 'inherit' });

    // Suppression du dossier .git pour rendre ind√©pendant le nouveau projet
    fs.removeSync(path.join(currentDir, '.git'));

    // Cr√©ation du fichier de configuration personnalis√© avec le nom du projet choisi
    const configContent = { projectName: response.projectName.trim() };
    fs.writeFileSync(configPath, JSON.stringify(configContent, null, 2));

    console.log(`‚úÖ Le projet "${response.projectName}" a √©t√© cr√©√© avec succ√®s !`);
  } catch (error) {
    console.error('‚ùå Une erreur est survenue durant la cr√©ation du projet :', error);
  }
}
