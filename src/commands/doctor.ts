import { execSync } from 'child_process';
import axios from 'axios';
import chalk from 'chalk';

/**
 * V√©rifie les pr√©requis techniques n√©cessaires au bon fonctionnement du projet.
 *
 * @remarks
 * Cette commande teste dans l‚Äôordre :
 * - Connexion internet
 * - Installation et disponibilit√© de Git
 * - Accessibilit√© du d√©p√¥t GitHub du template
 * - Disponibilit√© de Docker
 * - Disponibilit√© de Docker Compose
 *
 * En cas d‚Äô√©chec, elle fournit des indications pr√©cises pour r√©soudre les probl√®mes d√©tect√©s.
 *
 * @author Kactus83
 */
export async function doctorCommand(): Promise<void> {
  console.log(chalk.blue('ü©∫ V√©rification des pr√©requis en cours...\n'));

  const results = {
    internet: false,
    git: false,
    repo: false,
    docker: false,
    dockerCompose: false,
  };

  // Test de la connexion internet
  try {
    await axios.get('https://google.com', { timeout: 5000 });
    results.internet = true;
    console.log(chalk.green('‚úÖ Connexion internet fonctionnelle'));
  } catch {
    console.log(chalk.red('‚ùå Impossible de se connecter √† internet'));
  }

  // V√©rification de l‚Äôinstallation de Git
  try {
    execSync('git --version', { stdio: 'ignore' });
    results.git = true;
    console.log(chalk.green('‚úÖ Git est install√© et disponible'));
  } catch {
    console.log(chalk.red('‚ùå Git n‚Äôest pas install√© ou introuvable'));
  }

  // V√©rification de l‚Äôacc√®s au d√©p√¥t GitHub
  try {
    await axios.get('https://github.com/Kactus83/app-template', { timeout: 5000 });
    results.repo = true;
    console.log(chalk.green('‚úÖ Acc√®s au d√©p√¥t GitHub valid√©'));
  } catch {
    console.log(chalk.red('‚ùå Impossible d‚Äôacc√©der au d√©p√¥t GitHub "app-template"'));
  }

  // V√©rification de l‚Äôinstallation de Docker
  try {
    execSync('docker --version', { stdio: 'ignore' });
    results.docker = true;
    console.log(chalk.green('‚úÖ Docker est install√© et disponible'));
  } catch {
    console.log(chalk.red('‚ùå Docker n‚Äôest pas install√© ou introuvable'));
  }

  // V√©rification de Docker Compose
  try {
    execSync('docker-compose --version', { stdio: 'ignore' });
    results.dockerCompose = true;
    console.log(chalk.green('‚úÖ Docker Compose est install√© et disponible'));
  } catch {
    console.log(chalk.red('‚ùå Docker Compose n‚Äôest pas install√© ou introuvable'));
  }

  // Rapport final clair et pr√©cis
  console.log('\n', chalk.bold.blue('üìã Rapport de v√©rification :'));
  Object.entries(results).forEach(([key, value]) => {
    console.log(`- ${key} : ${value ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  });

  // Conseils pr√©cis en cas d‚Äô√©chec
  if (!results.internet) {
    console.log(chalk.yellow('\n‚û°Ô∏è V√©rifiez votre connexion internet et votre pare-feu.'));
  }
  if (!results.git) {
    console.log(chalk.yellow('\n‚û°Ô∏è Installez Git : https://git-scm.com/downloads'));
  }
  if (!results.repo) {
    console.log(chalk.yellow('\n‚û°Ô∏è V√©rifiez votre acc√®s √† GitHub ou l‚ÄôURL du d√©p√¥t.'));
  }
  if (!results.docker) {
    console.log(chalk.yellow('\n‚û°Ô∏è Installez Docker : https://docs.docker.com/get-docker/'));
  }
  if (!results.dockerCompose) {
    console.log(chalk.yellow('\n‚û°Ô∏è Installez Docker Compose : https://docs.docker.com/compose/install/'));
  }

  // Message de succ√®s global
  if (Object.values(results).every(Boolean)) {
    console.log(chalk.bold.green('\nüéâ Tout est op√©rationnel ! Vous √™tes pr√™t √† lancer votre projet !'));
  } else {
    console.log(chalk.bold.red('\n‚ùó Veuillez corriger les erreurs ci-dessus avant de continuer.'));
  }
}
