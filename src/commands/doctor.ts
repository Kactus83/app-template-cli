import { execSync } from 'child_process';
import axios from 'axios';
import chalk from 'chalk';
import prompts from 'prompts';
import { checkInternet, checkGit, checkRepo, checkDocker, checkDockerCompose } from './helpers';

/**
 * Commande "doctor" qui ex√©cute un diagnostic complet en v√©rifiant les pr√©requis,
 * propose de tenter des correctifs automatiques pour certains probl√®mes, 
 * reteste apr√®s correctifs, et affiche un compte rendu final d√©taill√©.
 *
 * @remarks
 * Pour Docker, si le test initial √©choue, l'utilisateur peut choisir de tenter
 * un correctif automatique (ex√©cution d'un "docker system prune"). Ensuite, le test est retest√©.
 * Pour l'acc√®s au d√©p√¥t GitHub, l'erreur est analys√©e pour fournir un d√©tail.
 *
 * @returns Promise<void> Une fois le diagnostic et les √©ventuels correctifs termin√©s.
 *
 * @example
 * $ appwizard doctor
 *
 * @author
 * Kactus83
 */
export async function doctorCommand(): Promise<void> {
  console.clear();
  console.log(chalk.blue('ü©∫ Diagnostic avanc√© avec tentatives de correctifs automatiques...\n'));

  // --- V√©rification initiale des pr√©requis ---
  const internetInitial = await checkInternet();
  const gitInitial = checkGit();
  let repoInitial = await checkRepo();
  let dockerInitial = checkDocker();
  let dockerComposeInitial = checkDockerCompose();

  // Analyse de l'acc√®s au d√©p√¥t et r√©cup√©ration du d√©tail en cas d'erreur
  let repoErrorDetail = '';
  if (!repoInitial) {
    try {
      await axios.get('https://github.com/Kactus83/app-template', { timeout: 5000 });
    } catch (err: any) {
      if (err.response && err.response.status) {
        repoErrorDetail = `HTTP status code: ${err.response.status}`;
      } else {
        repoErrorDetail = err.message;
      }
    }
  }

  console.log(chalk.blue('--- √âtat initial ---'));
  console.log(`Connexion Internet : ${internetInitial ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`Git                : ${gitInitial ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`Acc√®s au d√©p√¥t GitHub "app-template" : ${repoInitial ? chalk.green('OK') : chalk.red(`√âCHEC (${repoErrorDetail})`)}`);
  console.log(`Docker             : ${dockerInitial ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`Docker Compose     : ${dockerComposeInitial ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log('');

  // --- Tentatives de correctifs automatiques l√† o√π c'est envisageable ---

  // Pour Docker
  if (!dockerInitial) {
    console.log(chalk.red('‚ùå Docker n\'est pas disponible.'));
    const resDocker = await prompts({
      type: 'confirm',
      name: 'fixDocker',
      message: 'Voulez-vous tenter un correctif automatique pour Docker ?',
      initial: false,
    });
    if (resDocker.fixDocker) {
      try {
        console.log(chalk.blue('Tentative de correction automatique pour Docker...'));
        execSync('docker system prune --all --force', { stdio: 'inherit' });
      } catch (error) {
        console.error(chalk.red('√âchec de la tentative de correction pour Docker.'));
      }
    }
  }

  // Pour GitHub (acc√®s au d√©p√¥t) : pas de correctif automatique possible,
  // mais on invite l'utilisateur √† v√©rifier sa connexion ou ses param√®tres.
  if (!repoInitial) {
    console.log(chalk.red('‚ùå L\'acc√®s au d√©p√¥t GitHub "app-template" a √©chou√©.'));
    console.log(chalk.yellow('‚Üí V√©rifiez votre connexion, vos param√®tres proxy ou l\'URL du d√©p√¥t.'));
  }

  // Pas de correctifs automatiques envisageables pour Internet, Git ou Docker Compose.
  if (!gitInitial) {
    console.log(chalk.red('‚ùå Git n\'est pas install√©.'));
  }
  if (!dockerComposeInitial) {
    console.log(chalk.red('‚ùå Docker Compose n\'est pas install√©.'));
  }

  // --- Re-test des pr√©requis apr√®s les tentatives de correctifs ---
  const internetFinal = await checkInternet();
  const gitFinal = checkGit();
  const repoFinal = await checkRepo();
  const dockerFinal = checkDocker();
  const dockerComposeFinal = checkDockerCompose();

  console.log(chalk.blue('\n--- √âtat final apr√®s tentatives de correctifs ---'));
  console.log(`Connexion Internet : ${internetFinal ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`Git                : ${gitFinal ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`Acc√®s au d√©p√¥t GitHub "app-template" : ${repoFinal ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`Docker             : ${dockerFinal ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`Docker Compose     : ${dockerComposeFinal ? chalk.green('OK') : chalk.red('√âCHEC')}`);

  // --- Compte rendu final ---
  if (internetFinal && gitFinal && repoFinal && dockerFinal && dockerComposeFinal) {
    console.log(chalk.bold.green('\nüéâ Diagnostic avanc√© : Tous les pr√©requis sont satisfaits.'));
  } else {
    console.log(chalk.bold.red('\n‚ùó Diagnostic avanc√© : Certains pr√©requis ne sont toujours pas satisfaits.'));
    console.log(chalk.yellow('Veuillez suivre les conseils ci-dessus pour corriger les probl√®mes.'));
  }

  await prompts({
    type: 'text',
    name: 'pause',
    message: 'Appuyez sur Entr√©e pour continuer...',
  });
}
