import { execSync } from 'child_process';
import axios from 'axios';
import chalk from 'chalk';
import prompts from 'prompts';

/**
 * V√©rifie la connexion Internet en tentant d'acc√©der √† google.com.
 *
 * @returns Promise<boolean> Vrai si la connexion fonctionne.
 */
export async function checkInternet(): Promise<boolean> {
  try {
    await axios.get('https://google.com', { timeout: 5000 });
    return true;
  } catch {
    return false;
  }
}

/**
 * V√©rifie si Git est install√© en ex√©cutant "git --version".
 *
 * @returns boolean Vrai si Git est disponible.
 */
export function checkGit(): boolean {
  try {
    execSync('git --version', { stdio: 'ignore' });
    return true;
  } catch {
    return false;
  }
}

/**
 * V√©rifie l'acc√®s au d√©p√¥t GitHub "app-template".
 *
 * @returns Promise<boolean> Vrai si le d√©p√¥t est accessible.
 */
export async function checkRepo(): Promise<boolean> {
  try {
    await axios.get('https://github.com/Kactus83/app-template', { timeout: 5000 });
    return true;
  } catch {
    return false;
  }
}

/**
 * V√©rifie si Docker est install√© en ex√©cutant "docker --version".
 *
 * @returns boolean Vrai si Docker est disponible.
 */
export function checkDocker(): boolean {
  try {
    execSync('docker --version', { stdio: 'ignore' });
    return true;
  } catch {
    return false;
  }
}

/**
 * V√©rifie si Docker Compose est install√© en ex√©cutant "docker-compose --version".
 *
 * @returns boolean Vrai si Docker Compose est disponible.
 */
export function checkDockerCompose(): boolean {
  try {
    execSync('docker-compose --version', { stdio: 'ignore' });
    return true;
  } catch {
    return false;
  }
}

/**
 * Ouvre une URL dans le navigateur par d√©faut, selon le syst√®me.
 *
 * @param url L'URL √† ouvrir.
 */
export function openUrl(url: string): void {
  const platform = process.platform;
  try {
    if (platform === 'win32') {
      execSync(`start "" "${url}"`);
    } else if (platform === 'darwin') {
      execSync(`open "${url}"`);
    } else {
      execSync(`xdg-open "${url}"`);
    }
  } catch (error) {
    console.error(chalk.red(`Erreur lors de l'ouverture de ${url}:`), error);
  }
}

/**
 * Ouvre les fen√™tres web du projet dans le navigateur par d√©faut.
 *
 * Les URL ouvertes sont :
 * - Mailhog : http://localhost:8025
 * - Frontend : http://localhost:4200
 * - Documentation Typedocs du backend : http://localhost:3000/docs
 * - Swagger : http://localhost:3000/api-docs
 */
export function openWebPages(): void {
  console.log(chalk.blue('\nOuverture des fen√™tres web du projet...'));
  openUrl('http://localhost:8025');  // Mailhog
  openUrl('http://localhost:4200');   // Frontend
  openUrl('http://localhost:3000/docs');  // Documentation
  openUrl('http://localhost:3000/api-docs'); // Swagger
  console.log(chalk.green('‚úÖ Les fen√™tres web ont √©t√© ouvertes.'));
}

/**
 * Ex√©cute un diagnostic complet de l'environnement et affiche les r√©sultats avec des conseils.
 *
 * @returns Promise<void> Une fois le diagnostic termin√©.
 */
export async function runDetailedDiagnostic(): Promise<void> {
  console.clear();
  console.log(chalk.magenta('üîç Diagnostic d√©taill√© de l\'environnement\n'));
  
  const internet = await checkInternet();
  const git = checkGit();
  const repo = await checkRepo();
  const docker = checkDocker();
  const dockerCompose = checkDockerCompose();
  
  console.log(`Connexion Internet : ${internet ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`Git                : ${git ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`D√©p√¥t GitHub       : ${repo ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`Docker             : ${docker ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  console.log(`Docker Compose     : ${dockerCompose ? chalk.green('OK') : chalk.red('√âCHEC')}`);
  
  // Conseils d√©taill√©s en cas d'√©chec
  if (!internet) {
    console.log(chalk.yellow('‚Üí V√©rifiez votre connexion internet et vos param√®tres r√©seau.'));
  }
  if (!git) {
    console.log(chalk.yellow('‚Üí Installez Git depuis : https://git-scm.com/downloads'));
  }
  if (!repo) {
    console.log(chalk.yellow('‚Üí V√©rifiez votre acc√®s √† GitHub ou l\'URL du d√©p√¥t "app-template".'));
  }
  if (!docker) {
    console.log(chalk.yellow('‚Üí Installez Docker depuis : https://docs.docker.com/get-docker/'));
  }
  if (!dockerCompose) {
    console.log(chalk.yellow('‚Üí Installez Docker Compose depuis : https://docs.docker.com/compose/install/'));
  }
  
  if (internet && git && repo && docker && dockerCompose) {
    console.log(chalk.bold.green('\nüéâ Diagnostic : Tout est op√©rationnel.'));
  } else {
    console.log(chalk.bold.red('\n‚ùó Diagnostic : Certains pr√©requis ne sont pas satisfaits.'));
  }
  
  await prompts({
    type: 'text',
    name: 'pause',
    message: 'Appuyez sur Entr√©e pour continuer...',
  });
}

/**
 * Commande interactive "helpers" proposant deux options principales :
 * 1. Effectuer un diagnostic complet de l'environnement (similaire √† doctor).
 * 2. Ouvrir interactivement les fen√™tres web du projet (choix pour chaque fen√™tre).
 *
 * @returns Promise<void> Une fois l'op√©ration termin√©e.
 */
export async function helpersCommand(): Promise<void> {
  console.clear();
  console.log(chalk.magenta('üîß Menu Helpers - Outils d\'assistance\n'));
  
  const response = await prompts({
    type: 'select',
    name: 'option',
    message: 'Que souhaitez-vous faire ?',
    choices: [
      { title: '1. Effectuer un diagnostic complet de l\'environnement', value: 'diagnostic' },
      { title: '2. Ouvrir interactivement les fen√™tres web du projet', value: 'openWeb' },
      { title: '3. Retour', value: 'return' }
    ]
  });
  
  if (response.option === 'diagnostic') {
    await runDetailedDiagnostic();
  } else if (response.option === 'openWeb') {
    // Option interactive pour ouvrir chaque fen√™tre
    console.clear();
    console.log(chalk.magenta('üåê Ouverture interactive des fen√™tres web\n'));
    
    const pages = [
      { title: 'Mailhog (http://localhost:8025)', url: 'http://localhost:8025' },
      { title: 'Frontend (http://localhost:4200)', url: 'http://localhost:4200' },
      { title: 'Documentation (http://localhost:3000/docs)', url: 'http://localhost:3000/docs' },
      { title: 'Swagger (http://localhost:3000/api-docs)', url: 'http://localhost:3000/api-docs' },
    ];
    
    for (const page of pages) {
      const res = await prompts({
        type: 'confirm',
        name: 'open',
        message: `Voulez-vous ouvrir ${page.title} ?`,
        initial: true,
      });
      if (res.open) {
        openUrl(page.url);
        console.log(chalk.green(`‚úÖ ${page.title} ouvert.`));
      } else {
        console.log(chalk.yellow(`‚Üí ${page.title} non ouvert.`));
      }
    }
    
    await prompts({
      type: 'text',
      name: 'pause',
      message: 'Appuyez sur Entr√©e pour continuer...',
    });
  } else {
    console.log(chalk.green('\nRetour au menu principal.'));
  }
}
