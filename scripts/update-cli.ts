import { execSync } from 'child_process';
import * as fs from 'fs-extra';
import * as path from 'path';

function executeCommand(command: string) {
  console.log(`‚û°Ô∏è Ex√©cution : ${command}`);
  try {
    execSync(command, { stdio: 'inherit' });
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'ex√©cution de : ${command}`);
    process.exit(1);
  }
}

async function updateCLI() {
  console.log("üöÄ D√©marrage de la mise √† jour du CLI");

  // Compilation du projet
  console.log("üõ† Compilation du CLI...");
  executeCommand("npm run build");

  // Copier le dossier template local (PAS DE GIT!)
  const cliDir = path.resolve(__dirname, '..');
  const sourceTemplateDir = path.resolve(cliDir, '../template');
  const destinationTemplateDir = path.join(cliDir, 'app-template');

  console.log(`üìÇ Copie du dossier template local depuis ${sourceTemplateDir}...`);

  if (!fs.existsSync(sourceTemplateDir)) {
    console.error('‚ùå Le dossier template source est introuvable :', sourceTemplateDir);
    process.exit(1);
  }

  if (fs.existsSync(destinationTemplateDir)) {
    fs.removeSync(destinationTemplateDir);
  }

  fs.copySync(sourceTemplateDir, destinationTemplateDir);

  // V√©rifier inclusion dans package.json
  console.log("üì¶ V√©rification de l'inclusion du template dans npm...");
  const packageJsonPath = path.join(cliDir, "package.json");
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf8"));

  if (!packageJson.files) {
    packageJson.files = ["dist", "templates"];
  } else if (!packageJson.files.includes("templates")) {
    packageJson.files.push("templates");
  }

  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));

  // Publication sur npm
  console.log("üöÄ Publication sur npm...");
  executeCommand("npm publish");

  // Nettoyage du dossier templates apr√®s publication
  console.log("üßπ Nettoyage apr√®s publication...");
  fs.removeSync(destinationTemplateDir);

  console.log("‚úÖ Mise √† jour termin√©e avec succ√®s !");
}

updateCLI();
